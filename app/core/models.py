from django.utils.timezone import now
from django.core.validators import MaxValueValidator, MinValueValidator

from django.db import models


class Questions(models.Model):
    """
    Question Model:
    id - Autogenerated
    question - Model includes question text of 10000 chars
    iq_index - IQ index of questions ranges from 1 to 20
    created_date - When it was created
    """
    id = models.AutoField(primary_key=True)
    question = models.CharField(max_length=10000, blank=False, null=False)
    iq_index = models.PositiveIntegerField(default=1, validators=[MinValueValidator(1), MaxValueValidator(20)])
    created_date = models.DateTimeField(default=now, editable=False)

    def answers(self):
        return [answer.options for answer in self.questions.all()]

    def __str__(self):
        return self.question


class Answers(models.Model):
    """
    Answers Model:
    id - Autogenerated
    questions - FK to Question Model
    options - answers for the question, max 1000 characters
    correct - true if the option is correct, false if its wrong
    created_date - When it was created
    """
    id = models.AutoField(primary_key=True)
    questions = models.ForeignKey(Questions, on_delete=models.CASCADE,
                                  related_name='questions', default=None, null=True)
    option = models.CharField(max_length=1000, blank=False, null=False)
    correct = models.BooleanField(default=False)
    created_date = models.DateTimeField(default=now, editable=False)

    class Meta:
        """
        Uniqueness for this model is questions, options
        """
        unique_together = ('questions', 'option',)

    def __str__(self):
        return self.option + " - " + str(self.correct)


class Stats(models.Model):
    """
    Stats Model:
    id - Autogenerated
    name - Name of the user
    age - age if given
    iq_score - IQ score
    session_id - session ID to track
    created_date - When it was created
    """
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=100, blank=False, null=False)
    age = models.PositiveIntegerField(default=0, validators=[MinValueValidator(1), MaxValueValidator(100)])
    iq_score = models.IntegerField(default=0, null=False, blank=False)
    session_id = models.CharField(max_length=100, blank=False, null=False)
    created_date = models.DateTimeField(default=now, editable=False)

    class Meta:
        """
        Uniqueness for this model is name, session_id
        """
        unique_together = ('name', 'session_id', )

    def __str__(self):
        return self.name + " - " + str(self.age) + " - " + str(self.iq_score) + ' - ' + self.session_id
